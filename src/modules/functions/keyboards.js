import { Markup } from 'telegraf';


export function defaultOptionsToKeyboard(options) {
  const keyboard = [];
  let currentRow = [];

  for (const option of options) {
    currentRow.push({ text: option, callback_data: option });

    if (currentRow.length === 8) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }

  if (currentRow.length > 0) {
    keyboard.push(currentRow);
  }

  return keyboard;
}

export function optionsToKeyboard(options) {
  const keyboard = [];
  let currentRow = [];
  let isAnythingChecked = 0

  for (const option of options.defaultOptions2) {

    if (options.selectedOptions.includes(option)) {
      currentRow.push({ text: `${option} \u2705`, callback_data: option });
      isAnythingChecked++ 
    } else {
      currentRow.push({ text: option, callback_data: option });
    }

    if (currentRow.length === 8) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }

  if (currentRow.length > 0) {
    keyboard.push(currentRow);
  }

  if (isAnythingChecked) {
    keyboard.push([{ text: '–ì–æ—Ç–æ–≤–æ', callback_data: '–≥–æ—Ç–æ–≤–æ' }]);
  }

  return keyboard;
}

export function defaultOptionsToKeyboard2(options) {
  const keyboard = [];
  let currentRow = [];

  for (const option of options) {
    currentRow.push({ text: option, callback_data: option.slice(0, -4) });

    if (currentRow.length === 3) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }

  if (currentRow.length > 0) {
    keyboard.push(currentRow);
  }

  return keyboard;
}

export function optionsToKeyboard2(options) {
  const keyboard = [];
  let currentRow = [];
  let n = 0

  for (const option of options.defaultOptions) {

    if (options.selectedOptions.includes(option.slice(0, -4))) {
      currentRow.push({ text: `${option} \u2705`, callback_data: option.slice(0, -4) });
      n++
    } else {
      currentRow.push({ text: option, callback_data: option.slice(0, -4) });
    }

    if (currentRow.length === 3) {
      keyboard.push(currentRow);
      currentRow = [];
    }
  }

  if (currentRow.length > 0) {
    keyboard.push();
  }

  if (n>0) {
    keyboard.push([{ text: '–ì–æ—Ç–æ–≤–æ', callback_data: '–≥–æ—Ç–æ–≤–æ' }]);
  }

  return keyboard;
}

export const startKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É  üìù', '/newAnketa')],
  [Markup.button.callback('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏  üìÖ', '/info')],
  [Markup.button.callback('–ú–æ–∏ —Ñ–æ—Ä–º—ã  üìë', 'myForms')],
  [Markup.button.callback('–ö–æ–Ω—Ç–∞–∫—Ç—ã üìç', '/contacts')]
])

export const checkAnswersKeyboard = Markup.inlineKeyboard([
  [Markup.button.callback('–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é  ‚úÖ', '/allIsOk')],
  [Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å  ‚úèÔ∏è', 'edit')],
  [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É  üóë', '/exitAnketa')],
])

export const editAnswersKeyboard = {
  inline_keyboard: [
    [{ text: '–§–∞–º–∏–ª–∏—è', callback_data: 'editLastName' }, { text: '–ò–º—è', callback_data: 'editFistName' }],
    [{ text: '–û—Ç—á–µ—Å—Ç–≤–æ', callback_data: 'editMiddleName' }, { text: '–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'editCompany' }],
    [{ text: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', callback_data: 'editPosition' }, { text: '–ê–¥—Ä–µ—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', callback_data: 'editAdress' }],
    [{ text: '–î–∞—Ç—ã –ø–æ—Å–µ—â–µ–Ω–∏—è', callback_data: 'editDays' }, { text: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å', callback_data: 'editPractice' }],
    [{ text: '–¢–µ–ª–µ—Ñ–æ–Ω', callback_data: 'editPhone' }, { text: 'Email', callback_data: 'editEmail' }],
    [{ text: '–ì–æ—Ç–æ–≤–æ  ‚úÖ', callback_data: 'back' }],
],
};

export const editAnswersKeyboard2 = {
  inline_keyboard: [
    [{ text: '–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é  ‚úÖ', callback_data: '/allIsOk' }],
    [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å  ‚úèÔ∏è', callback_data: 'edit' }],
    [{ text: '–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É  üóë', callback_data: '/exitAnketa' }],
],
};

