import {Composer} from "telegraf";
import {deleteMessages} from "../../functions/deleteMessages.js";
import {
    defaultOptionsToKeyboard,
    defaultOptionsToKeyboard2,
    editAnswersKeyboard,
    optionsToKeyboard,
    startKeyboard
} from "../../functions/keyboards.js";
import editMessage from "../../functions/editMessage.js";
import {editMessageText} from "../../functions/editMessageText.js";
import {tryDeleteMessageAfterEditing} from "../../functions/tryDeleteMessageAfterEditing.js";
import {tryDeleteMessageIdFromArray} from "../../functions/tryDeleteMessageIdFromArray.js";

export const interest = new Composer();
const emailRegex = /^[a-zA-Z0-9]+([._-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+([.-][a-zA-Z0-9]+)*\.[a-zA-Z]{2,}$/;

export async function interestCallback(ctx){
    if (ctx.message.text === "/exit" || ctx.message.text === "/menu") {
        await deleteMessages(ctx)
        ctx.session.msg = await ctx.reply('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', startKeyboard);
        ctx.session.messageIds.push(ctx.session.msg.message_id)
        await ctx.scene.leave()
    } else if (ctx.wizard.state.data.email && ctx.session.msgesIdFromEditingAnswers.length === 0) {
        await tryDeleteMessageIdFromArray(ctx)
    } else if (emailRegex.test(ctx.message?.text)) {
        ctx.wizard.state.data.email = ctx.message.text.trim().toLowerCase()
        if (ctx.session.msgesIdFromEditingAnswers.length > 0) {
            // console.log(ctx.session.msgesIdFromEditingAnswers)
            await tryDeleteMessageAfterEditing(ctx)
            await editMessageText(ctx, editAnswersKeyboard)
            return ctx.wizard.selectStep(11)
        } else {
            ctx.wizard.state.data.selectedOptions = [];
            const defaultOptions1 = ['–ü—Ä–æ–±–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π üß™', '–û–ø—Ç–∏—á–µ—Å–∫–∞—è –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—è üî¨', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—è ‚öõÔ∏è', '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã —Ö–∏–º–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ñ–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ üåà', '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–æ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –Ω–µ—Ä–∞–∑—Ä—É—à–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å üñ•Ô∏è', '–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ñ–∏–∑–∏–∫–æ-–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ üèóÔ∏è', '–¢–≤–µ—Ä–¥–æ–º–µ—Ä—ã üí™', '–¢–µ—Ä–º–æ–∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–æ–ª–æ–≥–∏—è üå°Ô∏è']
            const list  = defaultOptions1.map((option, index) => `\n${index + 1}. ${option}`).join('\n');
            const question = `–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n(–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`;
            const msg = `${question}\n${list}`;
            ctx.session.messageForEdit = msg

            let defaultOptions2 = [];
            for (let i = 1; i <= defaultOptions1.length; i++) {
                defaultOptions2.push(`${i}`);
            }

            ctx.wizard.state.data.defaultOptions = defaultOptions1
            ctx.wizard.state.data.defaultOptions2 = defaultOptions2
            const keyboard = {
                inline_keyboard: [
                    ...defaultOptionsToKeyboard(defaultOptions2)
                ],
            };
            ctx.session.msg = await ctx.replyWithHTML(msg, { reply_markup: keyboard });
            ctx.session.messageIds.push(ctx.session.msg.message_id)
            ctx.session.prevMsg = ctx.session.msg
            ctx.session.messageIdForEdit = ctx.session.msg.message_id
        }
    } else {
        ctx.session.msg = await ctx.reply('–í–∏–¥–∏–º–æ –≥–¥–µ-—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∞. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email:');
        ctx.session.messageIds.push(ctx.session.msg.message_id)
        if (ctx.session.msgesIdFromEditingAnswers.length > 0) {
            ctx.session.msgesIdFromEditingAnswers.push(ctx.session.msg.message_id)
        }
        return ctx.wizard.selectStep(ctx.wizard.cursor)
    }
}

export async function interestListCallback(ctx){
    const option = ctx.match[1];
    const index = ctx.wizard.state.data.selectedOptions.indexOf(option);

    if (index === -1) {
        ctx.wizard.state.data.selectedOptions.push(option);
    } else {
        ctx.wizard.state.data.selectedOptions.splice(index, 1);
    }

    const keyboard = {
        inline_keyboard: [
            ...optionsToKeyboard(ctx.wizard.state.data),
        ],
    };

    await editMessage(ctx)
    ctx.editMessageText(
        ctx.session.editedMessage,
        {
            parse_mode: 'HTML',
            message_id: ctx.session.messageIdForEdit, // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ctx.chat.id, // –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            reply_markup: keyboard,
        }
    );
    ctx.answerCbQuery()
}

export async function interestFinalCallback(ctx){
    ctx.answerCbQuery()
    ctx.wizard.state.data.interest = ctx.wizard.state.data.selectedOptions
    ctx.wizard.state.data.selectedOptions = [];
    ctx.wizard.state.data.defaultOptions = [];
    ctx.wizard.state.data.defaultOptions2 = [];
    await tryDeleteMessageAfterEditing(ctx)
    const defaultOptions = ['23 –º–∞—è', '24 –º–∞—è', '25 –º–∞—è']
    ctx.wizard.state.data.defaultOptions = defaultOptions
    const keyboard = {
        inline_keyboard: [
            ...defaultOptionsToKeyboard2(defaultOptions)]
    };
    ctx.session.msg = await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è: \n(–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)`, { reply_markup: keyboard });
    ctx.session.messageIds.push(ctx.session.msg.message_id)
    ctx.session.prevMsg = ctx.session.msg
    return ctx.wizard.next()
}
