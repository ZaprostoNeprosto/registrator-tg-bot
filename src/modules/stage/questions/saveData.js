import {Composer, Markup} from "telegraf";
import path from "path";
import fs from "fs";
import savePDF from "../../functions/savePDF.js";
import saveAnswers from "../../functions/saveAnswers.js";
import mongodbConnection from "../../functions/mongodbConnection.js";
import sendEmail from "../../functions/sendEmail.js";
import getPageScreenshot from "../../functions/getPageScreenshot.js";
import {deleteMessages} from "../../functions/deleteMessages.js";
import {editAnswersKeyboard, editAnswersKeyboard2, startKeyboard} from "../../functions/keyboards.js";
import editAnswers from "../../functions/editAnswers.js";
import {currentDirectory} from "../../../config/config.js";
import {editMessageText} from "../../functions/editMessageText.js";
import {tryDeleteMessageIdFromArray} from "../../functions/tryDeleteMessageIdFromArray.js";

export const saveData = new Composer();
export async function saveDataCallback(ctx){
    if (ctx.message.text === "/exit" || ctx.message.text === "/menu") {
        ctx.session.msg = await ctx.reply('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', startKeyboard);
        ctx.session.messageIds.push(ctx.session.msg.message_id)
        await ctx.scene.leave()
    } else {
        await tryDeleteMessageIdFromArray(ctx)
    }
}

export async function saveDataEditCallback(ctx){
    ctx.answerCbQuery()
    ctx.editMessageReplyMarkup(editAnswersKeyboard);
}

export async function saveDataBackCallback(ctx){
    ctx.answerCbQuery()
    await editMessageText(ctx, editAnswersKeyboard2)
}

export async function saveDataListCallback(ctx){
    ctx.answerCbQuery()
    try {
        ctx.editMessageReplyMarkup({});
    } catch (err) {
        console.log(err);
    }
    const option = ctx.match[1];
    await editAnswers(ctx, option)
}

export async function saveDataReadyCallback(ctx){
    ctx.answerCbQuery()
    try {
        ctx.editMessageReplyMarkup({});
    } catch (err) {
        console.log(err);
    }
    const currentDate = new Date();
    ctx.wizard.state.data.formattedDate = currentDate.toLocaleString();
    await mongodbConnection(ctx.wizard.state.data)
    await saveAnswers(ctx.wizard.state.data)
    await savePDF(ctx.wizard.state.data)
    const screenshot = await getPageScreenshot(ctx.wizard.state.data)
    const bufferScreenshot = await Buffer.from(screenshot, 'base64');
    ctx.session.msg = await ctx.replyWithPhoto({ source: bufferScreenshot });
    ctx.session.messageIds.push(ctx.session.msg.message_id)
    await sendEmail(ctx.wizard.state.data)
    const pdfFileName = ctx.wizard.state.data.pdfFileName;
    const filePath = path.join(currentDirectory, 'src/data/output/filled_PDF', pdfFileName);
    fs.unlink(filePath, (error) => {
        if (error) {
            console.error('Error while deleting PDF');
            return;
        }
        console.log(`The PDF: ${pdfFileName} has been deleted`);
    });

    ctx.session.msg = await ctx.replyWithHTML(`–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É! ‚úÖ\n–ó–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –í–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Ñ–æ—Ä–º—É, –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ <u>–Ω–µ –±–æ–ª–µ–µ —á–µ–º –¥–≤—É–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏</u> –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è/–æ—Ç–¥–µ–ª–∞/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.`, Markup.inlineKeyboard([
        [Markup.button.callback('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ñ–æ—Ä–º—É  üìù', '/newAnketa')],
        [Markup.button.callback('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ', '/exitAnketa')],
    ]));
    ctx.session.messageIds.push(ctx.session.msg.message_id)
}

export async function saveDataExitCallback(ctx){
    ctx.answerCbQuery()
    await deleteMessages(ctx)
    ctx.session.msg = await ctx.reply('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å?', startKeyboard);
    ctx.session.messageIds.push(ctx.session.msg.message_id)
    return ctx.scene.leave()
}
